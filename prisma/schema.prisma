generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  RECRUITER
}

enum InterviewType {
  JOB_APPLICATION
  PRACTICE
}

enum ApplicationStatus {
  APPLIED
  REVIEWED
  INTERVIEW_INVITED
  REJECTED
  HIRED
}

enum InterviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ANALYSIS_PENDING
  ANALYSIS_FAILED
  ANALYSIS_COMPLETED
}

model Company {
  id        String   @id @default(cuid())
  name    String   @unique
  logoUrl   String?
  createdAt DateTime @default(now())

  // Relationships
  recruiters User[]
  jobs       Job[]

  @@map("companies")
}

// 3. User: Primary application user, linked to Clerk ID.
model User {
  clerkId   String   @id @map("clerkId") 
  email     String   @unique
  role      Role     @default(CANDIDATE) 

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // Relationships
  resumes   Resume[]
  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users") 
}

model Job {
  id             String   @id @default(cuid())
  title          String
  department     String
  location       String
  salary        String
  description    String
  requirements   String
  postedDate   DateTime @default(now())
  status    String  @default("active") 
  numberOfApplicants Int @default(0)
  requiredSkills String[] 
  
  // Link to the Company that owns this job
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  // Relationships
  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, title]) 
  @@map("jobs")
}

model Resume {
  id        String   @id @default(cuid())
  fileUrl   String?
  rawText   String   @db.Text 
  
  parsedData Json? 
  
  userId    String
  user      User     @relation(fields: [userId], references: [clerkId])

  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("resumes")
}

model Application {
  id          String          @id @default(cuid())
  
  candidateId String
  candidate   User            @relation(fields: [candidateId], references: [clerkId])
  
  jobId       String
  job         Job             @relation(fields: [jobId], references: [id])
  
  resumeId    String
  resume      Resume          @relation(fields: [resumeId], references: [id])
  
  status      ApplicationStatus @default(APPLIED)
  
  interviewSession InterviewSession?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([candidateId, jobId]) 
  @@map("applications")
}


model InterviewSession {
  id             String    @id @default(cuid())

  applicationId    String?           @unique
  application      Application?      @relation(fields: [applicationId], references: [id])
  
  // Vapi/AI Data
  vapiCallId       String?          @unique // Vapi's ID for tracking webhooks
  aiScore          Float?
  summary          String?          @db.Text
  transcript       String?          @db.Text
  
  // Status and Type
  status           InterviewStatus  @default(PENDING)
  type             InterviewType    @default(JOB_APPLICATION) // Practice mode will not be linked to an Application, see note below
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("interview_sessions")
}

// Enum for InterviewSession type clarity
// enum InterviewType {
//   JOB_APPLICATION // An interview linked to an actual job opening
//   PRACTICE        // A practice interview not tied to a specific job application
// }